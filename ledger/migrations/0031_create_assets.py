# Generated by Django 4.0 on 2022-01-30 14:40
import math

from django.db import migrations

from provider.exchanges.binance_assets import get_spot_filter
from provider.exchanges.binance_rules import futures_rules, rules as spot_rules


def create_assets(apps, schema_editor):
    Asset = apps.get_model('ledger', 'Asset')

    Asset.objects.get_or_create(symbol='IRT')
    Asset.objects.get_or_create(symbol='USDT', defaults={'order': 1})

    max_asset = Asset.objects.all().order_by('order').last()
    if max_asset:
        max_order = max_asset.order
    else:
        max_order = 0

    for symbol in futures_rules:
        if symbol.endswith('USDT'):
            print(symbol)
            coin = symbol[:-4]
            if not Asset.objects.filter(symbol=coin).exists():
                kwargs = {
                    'symbol': coin,
                    'order': max_order + 1,
                }

                if symbol in spot_rules:
                    rule = spot_rules[symbol]

                    kwargs['price_precision_usdt'] = -int(math.log10(rule['price_precision']))
                    kwargs['price_precision_irt'] = max(kwargs['price_precision_usdt'] - 3, 0)

                _filter = get_spot_filter(symbol, 'LOT_SIZE')
                if _filter:
                    kwargs['trade_quantity_step'] = _filter['stepSize']
                    kwargs['min_trade_quantity'] = _filter['minQty']
                    kwargs['max_trade_quantity'] = _filter['maxQty']

                Asset.objects.create(**kwargs)
                max_order += 1


class Migration(migrations.Migration):

    dependencies = [
        ('ledger', '0030_remove_asset_explorer_link_network_explorer_link'),
    ]

    operations = [
        migrations.RunPython(create_assets, migrations.RunPython.noop),
    ]
